{"componentChunkName":"component---src-templates-cheat-post-js","path":"/filter-request-headers/","result":{"data":{"site":{"siteMetadata":{"title":"StackCheats","author":"Athiththan Kathirgamasegaran"}},"mdx":{"id":"4fca37ae-4b29-5b18-acfe-5fa871228485","excerpt":"Stratagem A Quick-Peak on using  Filter  mediators to filter and execute custom executions based on presented request header. For example, check for theâ€¦","frontmatter":{"title":"Filter Request Headers","date":"November 15, 2019","intro":"Using Filter Mediator to Filter Request Headers","tags":["wso2","mediator","synapse-sequence"]},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Filter Request Headers\",\n  \"date\": \"2019-11-15\",\n  \"intro\": \"Using Filter Mediator to Filter Request Headers\",\n  \"short\": \"Filter Request Headers Using Filter Mediator\",\n  \"tags\": [\"wso2\", \"mediator\", \"synapse-sequence\"],\n  \"seo\": \"A simple guide to use Filter mediators to filter request headers on WSO2 Servers including WSO2 API Manager\",\n  \"cheat\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar CodeWave = makeShortcode(\"CodeWave\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"Stratagem\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#Stratagem\",\n    \"aria-label\": \"Stratagem permalink\",\n    \"className\": \"header-permlink before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Stratagem\"), mdx(\"p\", null, \"A Quick-Peak on using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Filter\"), \" mediators to filter and execute custom executions based on presented request header.\"), mdx(\"p\", null, \"For example, check for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mycustomheader\"), \" header value in the request and print the value using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Log\"), \" mediator.\"), mdx(CodeWave, {\n    mdxType: \"CodeWave\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \"<sequence name=\\\"custom-sequence\\\" \\n  xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\\n  <filter>\\n    <then></then>\\n    <else></else>\\n  </filter>\\n</sequence>\\n\")), mdx(\"p\", null, \"Given is a simple Synapse sequence with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Filter\"), \" mediator skeleton.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \"<sequence name=\\\"custom-sequence\\\" \\n  xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\\n  <filter \\n    source=\\\"get-property('mycustomheader', 'transport')\\\">\\n    <then></then>\\n    <else></else>\\n  </filter>\\n</sequence>\\n\")), mdx(\"p\", null, \"We can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get-property()\"), \" method to access and retrieve properties from the Synapse context.\\nWe will be using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get-property('mycustomheader', 'transport')\"), \" to retrieve our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mycustomheader\"), \" value from the Synapse context using the scope as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transport\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \"<sequence name=\\\"custom-sequence\\\" \\n  xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\\n  <filter \\n    source=\\\"get-property('mycustomheader', 'transport')\\\">\\n    <then>\\n      <log level=\\\"custom\\\">\\n        <property \\n          name=\\\"message\\\" \\n          value=\\\"Header is presented\\\" />\\n      </log>\\n    </then>\\n    <else>\\n      <log level=\\\"custom\\\">\\n        <property \\n          name=\\\"message\\\" \\n          value=\\\"Header is not presented\\\" />\\n      </log>\\n    </else>\\n  </filter>\\n</sequence>\\n\")), mdx(\"p\", null, \"Next we will add some \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Log\"), \" mediators in both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"then\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"else\"), \" sections of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Filter\"), \" mediator to print and log success and failure messages.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \"<sequence name=\\\"custom-sequence\\\" \\n  xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\\n  <filter \\n    source=\\\"get-property('mycustomheader', 'transport')\\\">\\n    <then>\\n      <log level=\\\"custom\\\">\\n        <property \\n          name=\\\"message\\\" \\n          value=\\\"Header is presented\\\" />\\n      </log>\\n    </then>\\n    <else>\\n      <log level=\\\"custom\\\">\\n        <property \\n          name=\\\"message\\\" \\n          value=\\\"Header is not presented\\\" />\\n      </log>\\n    </else>\\n  </filter>\\n</sequence>\\n\")), mdx(\"p\", null, \"Now we have successfully written and modified our code to capture and retrieve the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"someHeaders\"), \" value from the request headers. We will now print some custom message on success as well as on failure methods to prompt in the carbon logs\")), mdx(\"p\", null, \"Given below is the complete sample Synapse sequence (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"in-sequence\"), \") used to filter request Headers using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Filter\"), \" mediator\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \"<sequence name=\\\"custom-sequence\\\" xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\\n    <filter source=\\\"get-property('mycustomheader', 'transport')\\\">\\n        <then>\\n            <log level=\\\"custom\\\">\\n                <property name=\\\"message\\\" value=\\\"Header is presented\\\" />\\n            </log>\\n        </then>\\n        <else>\\n            <log level=\\\"custom\\\">\\n                <property name=\\\"message\\\" value=\\\"Header is not presented\\\" />\\n            </log>\\n        </else>\\n    </filter>\\n</sequence>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"sheetViews":{"count":27}},"pageContext":{"slug":"/filter-request-headers/"}},"staticQueryHashes":["2632472463"]}