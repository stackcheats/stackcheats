{"componentChunkName":"component---src-templates-cheat-post-js","path":"/log4j2-appender/","result":{"data":{"site":{"siteMetadata":{"title":"StackCheats","author":"Athiththan Kathirgamasegaran"}},"mdx":{"id":"53125eb2-3591-516d-9afc-26dbc3764f7c","excerpt":"Stratagem WSO2 API Manager now supports (from  v3.0.0  onwards) Log4j2 to manage logs and appenders. In this cheat, we will be looking at how to configure aâ€¦","frontmatter":{"title":"Log4j2 Appenders","date":"March 13, 2021","intro":"Configure Log4j2 Appenders in WSO2 API Manager v3.2.0","tags":["wso2","log4j2"]},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Log4j2 Appenders\",\n  \"date\": \"2021-03-13\",\n  \"intro\": \"Configure Log4j2 Appenders in WSO2 API Manager v3.2.0\",\n  \"short\": \"Configure Log4j2 Appenders in WSO2 API Manager\",\n  \"tags\": [\"wso2\", \"log4j2\"],\n  \"seo\": \"Configure a custom log4j2 appender to log Synapse Wire logs in a separate log\",\n  \"cheat\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar CodeWave = makeShortcode(\"CodeWave\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"Stratagem\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#Stratagem\",\n    \"aria-label\": \"Stratagem permalink\",\n    \"className\": \"header-permlink before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Stratagem\"), mdx(\"p\", null, \"WSO2 API Manager now supports (from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"v3.0.0\"), \" onwards) Log4j2 to manage logs and appenders. In this cheat, we will be looking at how to configure a custom appender for a simple requirement.\"), mdx(\"p\", null, \"The requirement is to log the Synapse Wire logs in a seperate log file. So, first, lets enable the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Synapse Wire\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DEBUG\"), \" logs in the API Manager server.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The following configurations and steps are verified in API Manager \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"v3.0.0\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"v3.1.0\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"v3.2.0\"), \" environments\")), mdx(CodeWave, {\n    mdxType: \"CodeWave\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"logger.synapse-wire.name = org.apache.synapse.transport.http.wire\\nlogger.synapse-wire.level = DEBUG\\n\\n# add to the loggers\\nloggers = synapse-wire, ...\\n\")), mdx(\"p\", null, \"To enable the Synapse Wire logs in API Manager server, navigate to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<apim>/repository/conf\"), \" directory and open the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"log4j2.properties\"), \". Then, add the mentioned properties (if not already exist) and set the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DEBUG\"), \" level.\"), mdx(\"p\", null, \"Then, add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"synapse-wire\"), \" keyword to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loggers\"), \" as mentioned. Refer to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://apim.docs.wso2.com/en/latest/administer/logging-and-monitoring/logging/setting-up-logging/#enable-gateway-wire-logs\"\n  }, \"Enable Gateway Wire Logs\"), \" for more info.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"appender.WIRE_LOG.type = RollingFile\\nappender.WIRE_LOG.name = WIRE_LOG\\nappender.WIRE_LOG.fileName \\n    = ${sys:carbon.home}/repository/logs/wire.log\\nappender.WIRE_LOG.filePattern \\n    = ${sys:carbon.home}/repository/logs/wire-%d{MM-dd-yyyy}.log\\nappender.WIRE_LOG.layout.type = PatternLayout\\nappender.WIRE_LOG.layout.pattern \\n    = TID: [%tenantId] [%appName] [%d] %5p {%c} - %m%ex%n\\nappender.WIRE_LOG.policies.type = Policies\\nappender.WIRE_LOG.policies.time.type = TimeBasedTriggeringPolicy\\nappender.WIRE_LOG.policies.time.interval = 1\\nappender.WIRE_LOG.policies.time.modulate = true\\nappender.WIRE_LOG.policies.size.type = SizeBasedTriggeringPolicy\\nappender.WIRE_LOG.policies.size.size = 10MB\\n\\n# add to the appenders\\nappenders = WIRE_LOG, ...\\n\")), mdx(\"p\", null, \"Now, let\\u2019s introduce a Log4j2 appender to log the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Synapse Wire\"), \" to a separate log file.\"), mdx(\"p\", null, \"Given is a sample Log4j2 Appender configuration with RollingFile. The presented configuration contains the basic set of patterns and layouts to print logs. You can further enhance the configurations according to your need.\"), mdx(\"p\", null, \"Once the appender is configured, the Appender name needs to be added to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"appenders\"), \" property in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"log4j2.properties\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"logger.synapse-wire.name = org.apache.synapse.transport.http.wire\\nlogger.synapse-wire.level = DEBUG\\n\\n# configure with the appender\\nlogger.synapse-wire.appenderRef.WIRE_LOG.ref = WIRE_LOG\\nlogger.synapse-wire.additivity = false\\n\")), mdx(\"p\", null, \"At last, configure the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"synapse-wire\"), \" logger configuration with the created \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WIRE_LOG\"), \" appender as given.\"), mdx(\"p\", null, \"Once the configurations are saved, we will see a new log file created with the name \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"wire.log\"), \" inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<apim>/repository/logs\"), \" directory containing the Wire logs.\")), mdx(\"p\", null, \"We have now successfully configured a Log4j2 Appender to create and log the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Synapse Wire\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DEBUG\"), \" logs in a separate file named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"wire\"), \".\"), mdx(\"p\", null, \"The complete set of log4j2 configurations that we introduced and used in this cheat is given below.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"\\n# appender declaration\\nappenders = WIRE_LOG, ...\\n\\n# custom appender\\nappender.WIRE_LOG.type = RollingFile\\nappender.WIRE_LOG.name = WIRE_LOG\\nappender.WIRE_LOG.fileName = ${sys:carbon.home}/repository/logs/wire.log\\nappender.WIRE_LOG.filePattern = ${sys:carbon.home}/repository/logs/wire-%d{MM-dd-yyyy}.log\\nappender.WIRE_LOG.layout.type = PatternLayout\\nappender.WIRE_LOG.layout.pattern = TID: [%tenantId] [%appName] [%d] %5p {%c} - %m%ex%n\\nappender.WIRE_LOG.policies.type = Policies\\nappender.WIRE_LOG.policies.time.type = TimeBasedTriggeringPolicy\\nappender.WIRE_LOG.policies.time.interval = 1\\nappender.WIRE_LOG.policies.time.modulate = true\\nappender.WIRE_LOG.policies.size.type = SizeBasedTriggeringPolicy\\nappender.WIRE_LOG.policies.size.size = 10MB\\n\\n# engaging the synapse-wire logger\\nloggers = synapse-wire, ...\\n\\n# enabling Synapse Wire DEBUG\\nlogger.synapse-wire.name = org.apache.synapse.transport.http.wire\\nlogger.synapse-wire.level = DEBUG\\n\\n# configuring the logger with the appender\\nlogger.synapse-wire.appenderRef.WIRE_LOG.ref = WIRE_LOG\\nlogger.synapse-wire.additivity = false\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/log4j2-appender/"}},"staticQueryHashes":["3128451518"]}