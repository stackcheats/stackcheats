{"componentChunkName":"component---src-templates-cheat-post-js","path":"/access-api-custom-properties/","result":{"data":{"site":{"siteMetadata":{"title":"StackCheats","author":"Athiththan Kathirgamasegaran"}},"mdx":{"id":"e886a8d0-8443-5909-aecf-c7c7a104f15d","excerpt":"Stratagem As out-of-the-box, the WSO2 API Manager supports adding and creating custom API properties. You can learn more about managing custom API propertiesâ€¦","frontmatter":{"title":"Retrieve (Custom) API Properties","date":"September 26, 2020","intro":"Access Custom API Properties in Mediation Sequences","tags":["wso2","mediator","synapse-sequence","api-properties"]},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Retrieve (Custom) API Properties\",\n  \"date\": \"2020-09-26\",\n  \"intro\": \"Access Custom API Properties in Mediation Sequences\",\n  \"short\": \"Access Custom API Properties from Mediation\",\n  \"tags\": [\"wso2\", \"mediator\", \"synapse-sequence\", \"api-properties\"],\n  \"seo\": \"A demo guide accessing the custom API properties from mediation sequences in WSO2 API Manager\",\n  \"cheat\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar CodeWave = makeShortcode(\"CodeWave\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"Stratagem\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#Stratagem\",\n    \"aria-label\": \"Stratagem permalink\",\n    \"className\": \"header-permlink before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Stratagem\"), mdx(\"p\", null, \"As out-of-the-box, the WSO2 API Manager supports adding and creating custom API properties. You can learn more about managing custom API properties from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.wso2.com/display/AM260/Adding+Custom+Properties+to+APIs\"\n  }, \"here\"), \". In this cheat, we will be looking at how to access these custom API properties from mediation sequences.\"), mdx(\"p\", null, \"For demo, we have introduced a custom property named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transparent-token\"), \" in one of our published API, and we have a requirement to log this property in the logs whenever this API is invoked.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Quick Note\"), \" \"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The following illustrations are developed considering an All-In-One deployment environment of the API Manager server. In a distributed environment, the Gateway component will not have access to the registry space of the Publisher component unless it is shared and configured under the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"master-datasources.xml\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"registry.xml\"), \".\")), mdx(CodeWave, {\n    mdxType: \"CodeWave\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \"<sequence name=\\\"custom-sequence\\\" \\n  xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\\n  <log level=\\\"custom\\\">\\n      <property \\n        name=\\\"prop\\\" \\n        value=\\\"value-to-be-printed\\\" \\n      />\\n  </log>\\n</sequence>\\n\")), mdx(\"p\", null, \"All introduced custom API properties are stored and persisted inside the local \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"registry\"), \" of the API Manager. We are going to implement a mediation sequence to retrieve our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transparent-token\"), \" custom property from the local \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"registry\"), \" space of the API Manager. \"), mdx(\"p\", null, \"Since, our requirement is to only log the property, we are going to start implementing a custom mediation sequence with a simple log mediator.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \"<sequence name=\\\"custom-sequence\\\" \\n  xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\\n  <log level=\\\"custom\\\">\\n      <property \\n        name=\\\"prop\\\" \\n        expression=\\\"get-property('registry')\\\" \\n      />\\n  </log>\\n</sequence>\\n\")), mdx(\"p\", null, \"Change the log mediator to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"expression\"), \" in order to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get-property()\"), \" method to retrieve our custom API property. As the introduced custom property is available in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"registry\"), \" space, we are going to specify the scope of our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get-property()\"), \" with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"registry\"), \" scope.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \"fn:concat(\\n  'gov:/apimgt/applicationdata/provider/',\\n  $ctx:api.ut.apiPublisher, '/',\\n  $ctx:api.ut.api, '/',\\n  $ctx:api.ut.version, '/',\\n  'api@api_meta.transparent-token'\\n)\\n\")), mdx(\"p\", null, \"Now let\\u2019s construct the registry path to access our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transparent-token\"), \" custom property. The registry path is constructed with the use of existing context properties. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fn:concat\"), \" function is used to join the strings and the properties to build a complete registry path.\"), mdx(\"p\", null, \"Following are the usages of the specified context properties\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$ctx:api.ut.apiPublisher\"), \": Publisher of the API\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$ctx:api.ut.api\"), \": API name\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$ctx:api.ut.version\"), \": API version\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \"<sequence name=\\\"custom-sequence\\\" \\n  xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\\n  <log level=\\\"custom\\\">\\n      <property \\n        name=\\\"prop\\\" \\n        expression=\\\"get-property('registry', \\n          fn:concat(\\n            'gov:/apimgt/applicationdata/provider/',\\n            $ctx:api.ut.apiPublisher, '/',\\n            $ctx:api.ut.api, '/',\\n            $ctx:api.ut.version, '/',\\n            'api@api_meta.transparent-token'\\n          ))\\\"\\n      />\\n  </log>\\n</sequence>\\n\")), mdx(\"p\", null, \"We have now successfully developed a custom mediation sequence to retrieve our custom API property from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"registry\"), \" space and to print the value in the logs. \"), mdx(\"p\", null, \"Upload the sequence as an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"in-mediation\"), \" sequence to the API from the Publisher portal and, Save and Publish, Invoke and check the logs.\")), mdx(\"p\", null, \"Given below is the complete Synapse sequence (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"in-sequence\"), \"), we developed to access our custom property named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transparent-token\"), \" from the local \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"registry\"), \" space of the API Manager.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \"<sequence name=\\\"custom-sequence\\\" xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\\n  <log level=\\\"custom\\\">\\n      <property \\n        name=\\\"prop\\\"\\n        expression=\\\"get-property('registry', \\n          fn:concat(\\n            'gov:/apimgt/applicationdata/provider/',\\n            $ctx:api.ut.apiPublisher, '/',\\n            $ctx:api.ut.api, '/',\\n            $ctx:api.ut.version, '/',\\n            'api@api_meta.transparent-token'\\n          ))\\\" />\\n  </log>\\n</sequence>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/access-api-custom-properties/"}},"staticQueryHashes":["3128451518"]}